/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';
import {
  ColumnDefinition,
} from './components/tree/tree';

export namespace Components {
  interface CheckBox {
    /**
    * the state of the checkbox 'true' 'false' or 'indeterminate'
    */
    'checked': string;
    /**
    * function to run when clicked
    */
    'clickAction': (ev: MouseEvent) => void;
    /**
    * wether or not the checkbox is disabled
    */
    'disableCheckbox': boolean;
    /**
    * text label for our checkbox
    */
    'label': string;
    /**
    * the positioning for the label 'top', 'right', 'left', or 'bottom'
    */
    'labelPosition': string;
  }
  interface SmttAccordion {}
  interface SmttAccordionItem {
    /**
    * Title of accordion item
    */
    'accordionTitle': string;
    /**
    * The content of the action bar
    */
    'actionBarContent': string;
    /**
    * Position of icon
    */
    'alignment': 'start' | 'end';
    /**
    * Whether or not the item is expanded by default
    */
    'expanded': boolean;
  }
  interface SmttButton {
    /**
    * Alignment of button content
    */
    'alignment': 'left' | 'right' | 'center';
    /**
    * Wether the button is disabled or not
    */
    'disabled': boolean;
    /**
    * Whether or not the button should fill the height of its parent
    */
    'fullHeight': boolean;
    /**
    * Whether or not the button should fill the width of its parent
    */
    'fullWidth': boolean;
    /**
    * icon to be used in button (if variation necessitates)
    */
    'icon': string;
    /**
    * Whether icon should be displayed to the left or the right
    */
    'iconRight': boolean;
    /**
    * Styles to be applied to icon
    */
    'iconStyle': object;
    /**
    * The size of the button
    */
    'size': 'sm' | 'md' | 'lg';
    /**
    * color theme to be applied to the button e.g primary
    */
    'theme': | 'primary'
    | 'secondary'
    | 'tertiary'
    | 'destructive'
    | 'warning'
    | 'text-links';
    /**
    * The type of button (corresponds to type property of native html button)
    */
    'type': 'confirm' | 'submit' | 'button';
    /**
    * button variation: icon only button, icon with label or label only
    */
    'variation': 'icon' | 'icon-label' | 'label';
  }
  interface SmttContextualBox {
    'mode': 'primary' | 'warning';
  }
  interface SmttDropdown {
    /**
    * Whether or not the dropdown should be full width
    */
    'fullWidth': boolean;
    /**
    * Title to be displayed on dropdown
    */
    'name': string;
    /**
    * The width of the dropdown container
    */
    'size': number;
    /**
    * Subheading to be displayed under name
    */
    'subHeading': string;
  }
  interface SmttDropdownGroup {
    /**
    * The name of the group
    */
    'name': string;
  }
  interface SmttDropdownItem {
    /**
    * Link item should link to
    */
    'href': string;
    /**
    * Target describing how the link should be opened
    */
    'target': '_blank' | '_self' | '_parent' | '_top' | 'framename';
  }
  interface SmttFooter {
    'hash': string;
  }
  interface SmttHeader {
    /**
    * Breadcrumb string
    */
    'breadcrumb': string;
    /**
    * Message to shown beneath header
    */
    'headerMessage': string;
    /**
    * URl of logo to be used in header
    */
    'imageUrl': string;
    /**
    * The title of the left menu
    */
    'leftMenuTitle': string;
    /**
    * The title of the user dropdown
    */
    'userMenuTitle': string;
  }
  interface SmttIcon {
    /**
    * @todo [WIP] styling meant to go hand in hand with buttons (should probably be moved)
    */
    'addBtnClass': (contentNode: any) => Promise<void>;
    'color': string;
    'disabled': boolean;
    'icon': string;
    /**
    * The label for the icon
    */
    'label': string;
    'theme': string;
    'type': string;
    'width': string;
  }
  interface SmttInput {
    /**
    * wether input is valid or not considering its constraints
    */
    'checkValidity': Function;
    /**
    * custom validator to be passed in to determing if the form field is "valid"
    */
    'customValidator': Function;
    /**
    * wether input is disabled
    */
    'disabled': boolean;
    'errorMap': {
      default?: string;
      badInput?: string;
      customError?: string;
      patternMismatch?: string;
      rangeOverflow?: string;
      rangeUnderflow?: string;
      stepMismatch?: string;
      tooLong?: string;
      tooShort?: string;
      typeMismatch?: string;
      valid?: string;
      valueMissing?: true;
    };
    /**
    * this sets the default error message when the invalid reason is not known or accounted for
    */
    'errorMsg': string;
    /**
    * the form to attach this input to
    */
    'form': string;
    /**
    * id to be applied to input field
    */
    'formId': string;
    /**
    * wether to stretch the width to fit the container
    */
    'fullWidth': boolean;
    /**
    * small help text to be shown below input field
    */
    'helpText': string;
    /**
    * label text to be associated with input (both visually and accessibility wise)
    */
    'label': string;
    /**
    * id to be given to input element
    */
    'name': string;
    /**
    * name of regex pattern to be applied to input's pattern field
    */
    'patternName': string;
    /**
    * placeholder for input
    */
    'placeholder': string;
    /**
    * wether input is required
    */
    'readonly': boolean;
    /**
    * wether input is required
    */
    'required': boolean;
    /**
    * type of input field
    */
    'type': | 'text'
    | 'password'
    | 'email'
    | 'search'
    | 'tel'
    | 'week'
    | 'url'
    | 'month';
    /**
    * provide the validity state of the component
    */
    'validity': Function;
    /**
    * current value of the input element
    */
    'value': Function;
  }
  interface SmttRolloverMenu {
    'closeAllOtherMenus': () => Promise<void>;
    'disabled': boolean;
    'isExpanded': string;
    'toggleExpansion': () => Promise<string>;
  }
  interface SmttStatusLabel {
    'subtle': boolean;
    'variation': 'completed' | 'cancelled' | 'pending';
  }
  interface SmttTree {
    /**
    * Name of field containing children
    */
    'childrenField': string;
    /**
    * The definition of the columns
    */
    'columns': ColumnDefinition[];
    /**
    * Whether tree should be expanded by default
    */
    'expanded': boolean;
    /**
    * Name of group field
    */
    'groupField': string;
    /**
    * Whether or not to paginate data
    */
    'paginate': boolean;
    /**
    * Height of rows
    */
    'rowHeight': number;
    /**
    * Type of selection to be used in tree
    */
    'rowSelection': 'single' | 'multiple';
    /**
    * The array of data to be displayed within rows
    */
    'rows': object[];
    /**
    * The desired height of the element
    */
    'treeHeight': number;
  }
  interface SmttWizard {
    /**
    * The title of wizard
    */
    'name': string;
    /**
    * The subHeading of wizard
    */
    'subHeading': string;
  }
  interface SmttWizardStep {
    /**
    * Whether step is active
    */
    'active': boolean;
    /**
    * The title of the wizard step
    */
    'name': string;
    /**
    * The subtitle of the wizard step
    */
    'subHeading': string;
  }
}

declare global {


  interface HTMLCheckBoxElement extends Components.CheckBox, HTMLStencilElement {}
  var HTMLCheckBoxElement: {
    prototype: HTMLCheckBoxElement;
    new (): HTMLCheckBoxElement;
  };

  interface HTMLSmttAccordionElement extends Components.SmttAccordion, HTMLStencilElement {}
  var HTMLSmttAccordionElement: {
    prototype: HTMLSmttAccordionElement;
    new (): HTMLSmttAccordionElement;
  };

  interface HTMLSmttAccordionItemElement extends Components.SmttAccordionItem, HTMLStencilElement {}
  var HTMLSmttAccordionItemElement: {
    prototype: HTMLSmttAccordionItemElement;
    new (): HTMLSmttAccordionItemElement;
  };

  interface HTMLSmttButtonElement extends Components.SmttButton, HTMLStencilElement {}
  var HTMLSmttButtonElement: {
    prototype: HTMLSmttButtonElement;
    new (): HTMLSmttButtonElement;
  };

  interface HTMLSmttContextualBoxElement extends Components.SmttContextualBox, HTMLStencilElement {}
  var HTMLSmttContextualBoxElement: {
    prototype: HTMLSmttContextualBoxElement;
    new (): HTMLSmttContextualBoxElement;
  };

  interface HTMLSmttDropdownElement extends Components.SmttDropdown, HTMLStencilElement {}
  var HTMLSmttDropdownElement: {
    prototype: HTMLSmttDropdownElement;
    new (): HTMLSmttDropdownElement;
  };

  interface HTMLSmttDropdownGroupElement extends Components.SmttDropdownGroup, HTMLStencilElement {}
  var HTMLSmttDropdownGroupElement: {
    prototype: HTMLSmttDropdownGroupElement;
    new (): HTMLSmttDropdownGroupElement;
  };

  interface HTMLSmttDropdownItemElement extends Components.SmttDropdownItem, HTMLStencilElement {}
  var HTMLSmttDropdownItemElement: {
    prototype: HTMLSmttDropdownItemElement;
    new (): HTMLSmttDropdownItemElement;
  };

  interface HTMLSmttFooterElement extends Components.SmttFooter, HTMLStencilElement {}
  var HTMLSmttFooterElement: {
    prototype: HTMLSmttFooterElement;
    new (): HTMLSmttFooterElement;
  };

  interface HTMLSmttHeaderElement extends Components.SmttHeader, HTMLStencilElement {}
  var HTMLSmttHeaderElement: {
    prototype: HTMLSmttHeaderElement;
    new (): HTMLSmttHeaderElement;
  };

  interface HTMLSmttIconElement extends Components.SmttIcon, HTMLStencilElement {}
  var HTMLSmttIconElement: {
    prototype: HTMLSmttIconElement;
    new (): HTMLSmttIconElement;
  };

  interface HTMLSmttInputElement extends Components.SmttInput, HTMLStencilElement {}
  var HTMLSmttInputElement: {
    prototype: HTMLSmttInputElement;
    new (): HTMLSmttInputElement;
  };

  interface HTMLSmttRolloverMenuElement extends Components.SmttRolloverMenu, HTMLStencilElement {}
  var HTMLSmttRolloverMenuElement: {
    prototype: HTMLSmttRolloverMenuElement;
    new (): HTMLSmttRolloverMenuElement;
  };

  interface HTMLSmttStatusLabelElement extends Components.SmttStatusLabel, HTMLStencilElement {}
  var HTMLSmttStatusLabelElement: {
    prototype: HTMLSmttStatusLabelElement;
    new (): HTMLSmttStatusLabelElement;
  };

  interface HTMLSmttTreeElement extends Components.SmttTree, HTMLStencilElement {}
  var HTMLSmttTreeElement: {
    prototype: HTMLSmttTreeElement;
    new (): HTMLSmttTreeElement;
  };

  interface HTMLSmttWizardElement extends Components.SmttWizard, HTMLStencilElement {}
  var HTMLSmttWizardElement: {
    prototype: HTMLSmttWizardElement;
    new (): HTMLSmttWizardElement;
  };

  interface HTMLSmttWizardStepElement extends Components.SmttWizardStep, HTMLStencilElement {}
  var HTMLSmttWizardStepElement: {
    prototype: HTMLSmttWizardStepElement;
    new (): HTMLSmttWizardStepElement;
  };
  interface HTMLElementTagNameMap {
    'check-box': HTMLCheckBoxElement;
    'smtt-accordion': HTMLSmttAccordionElement;
    'smtt-accordion-item': HTMLSmttAccordionItemElement;
    'smtt-button': HTMLSmttButtonElement;
    'smtt-contextual-box': HTMLSmttContextualBoxElement;
    'smtt-dropdown': HTMLSmttDropdownElement;
    'smtt-dropdown-group': HTMLSmttDropdownGroupElement;
    'smtt-dropdown-item': HTMLSmttDropdownItemElement;
    'smtt-footer': HTMLSmttFooterElement;
    'smtt-header': HTMLSmttHeaderElement;
    'smtt-icon': HTMLSmttIconElement;
    'smtt-input': HTMLSmttInputElement;
    'smtt-rollover-menu': HTMLSmttRolloverMenuElement;
    'smtt-status-label': HTMLSmttStatusLabelElement;
    'smtt-tree': HTMLSmttTreeElement;
    'smtt-wizard': HTMLSmttWizardElement;
    'smtt-wizard-step': HTMLSmttWizardStepElement;
  }
}

declare namespace LocalJSX {
  interface CheckBox {
    /**
    * the state of the checkbox 'true' 'false' or 'indeterminate'
    */
    'checked'?: string;
    /**
    * function to run when clicked
    */
    'clickAction'?: (ev: MouseEvent) => void;
    /**
    * wether or not the checkbox is disabled
    */
    'disableCheckbox'?: boolean;
    /**
    * text label for our checkbox
    */
    'label'?: string;
    /**
    * the positioning for the label 'top', 'right', 'left', or 'bottom'
    */
    'labelPosition'?: string;
  }
  interface SmttAccordion {}
  interface SmttAccordionItem {
    /**
    * Title of accordion item
    */
    'accordionTitle'?: string;
    /**
    * The content of the action bar
    */
    'actionBarContent'?: string;
    /**
    * Position of icon
    */
    'alignment'?: 'start' | 'end';
    /**
    * Whether or not the item is expanded by default
    */
    'expanded'?: boolean;
  }
  interface SmttButton {
    /**
    * Alignment of button content
    */
    'alignment'?: 'left' | 'right' | 'center';
    /**
    * Wether the button is disabled or not
    */
    'disabled'?: boolean;
    /**
    * Whether or not the button should fill the height of its parent
    */
    'fullHeight'?: boolean;
    /**
    * Whether or not the button should fill the width of its parent
    */
    'fullWidth'?: boolean;
    /**
    * icon to be used in button (if variation necessitates)
    */
    'icon'?: string;
    /**
    * Whether icon should be displayed to the left or the right
    */
    'iconRight'?: boolean;
    /**
    * Styles to be applied to icon
    */
    'iconStyle'?: object;
    /**
    * The size of the button
    */
    'size'?: 'sm' | 'md' | 'lg';
    /**
    * color theme to be applied to the button e.g primary
    */
    'theme'?: | 'primary'
    | 'secondary'
    | 'tertiary'
    | 'destructive'
    | 'warning'
    | 'text-links';
    /**
    * The type of button (corresponds to type property of native html button)
    */
    'type'?: 'confirm' | 'submit' | 'button';
    /**
    * button variation: icon only button, icon with label or label only
    */
    'variation'?: 'icon' | 'icon-label' | 'label';
  }
  interface SmttContextualBox {
    'mode'?: 'primary' | 'warning';
  }
  interface SmttDropdown {
    /**
    * Whether or not the dropdown should be full width
    */
    'fullWidth'?: boolean;
    /**
    * Title to be displayed on dropdown
    */
    'name'?: string;
    /**
    * The width of the dropdown container
    */
    'size'?: number;
    /**
    * Subheading to be displayed under name
    */
    'subHeading'?: string;
  }
  interface SmttDropdownGroup {
    /**
    * The name of the group
    */
    'name'?: string;
  }
  interface SmttDropdownItem {
    /**
    * Link item should link to
    */
    'href'?: string;
    /**
    * Target describing how the link should be opened
    */
    'target'?: '_blank' | '_self' | '_parent' | '_top' | 'framename';
  }
  interface SmttFooter {
    'hash'?: string;
  }
  interface SmttHeader {
    /**
    * Breadcrumb string
    */
    'breadcrumb'?: string;
    /**
    * Message to shown beneath header
    */
    'headerMessage'?: string;
    /**
    * URl of logo to be used in header
    */
    'imageUrl'?: string;
    /**
    * The title of the left menu
    */
    'leftMenuTitle'?: string;
    /**
    * The title of the user dropdown
    */
    'userMenuTitle'?: string;
  }
  interface SmttIcon {
    'color'?: string;
    'disabled'?: boolean;
    'icon'?: string;
    /**
    * The label for the icon
    */
    'label'?: string;
    'theme'?: string;
    'type'?: string;
    'width'?: string;
  }
  interface SmttInput {
    /**
    * wether input is valid or not considering its constraints
    */
    'checkValidity'?: Function;
    /**
    * custom validator to be passed in to determing if the form field is "valid"
    */
    'customValidator'?: Function;
    /**
    * wether input is disabled
    */
    'disabled'?: boolean;
    'errorMap'?: {
      default?: string;
      badInput?: string;
      customError?: string;
      patternMismatch?: string;
      rangeOverflow?: string;
      rangeUnderflow?: string;
      stepMismatch?: string;
      tooLong?: string;
      tooShort?: string;
      typeMismatch?: string;
      valid?: string;
      valueMissing?: true;
    };
    /**
    * this sets the default error message when the invalid reason is not known or accounted for
    */
    'errorMsg'?: string;
    /**
    * the form to attach this input to
    */
    'form'?: string;
    /**
    * id to be applied to input field
    */
    'formId'?: string;
    /**
    * wether to stretch the width to fit the container
    */
    'fullWidth'?: boolean;
    /**
    * small help text to be shown below input field
    */
    'helpText'?: string;
    /**
    * label text to be associated with input (both visually and accessibility wise)
    */
    'label'?: string;
    /**
    * id to be given to input element
    */
    'name'?: string;
    /**
    * name of regex pattern to be applied to input's pattern field
    */
    'patternName'?: string;
    /**
    * placeholder for input
    */
    'placeholder'?: string;
    /**
    * wether input is required
    */
    'readonly'?: boolean;
    /**
    * wether input is required
    */
    'required'?: boolean;
    /**
    * type of input field
    */
    'type'?: | 'text'
    | 'password'
    | 'email'
    | 'search'
    | 'tel'
    | 'week'
    | 'url'
    | 'month';
    /**
    * provide the validity state of the component
    */
    'validity'?: Function;
    /**
    * current value of the input element
    */
    'value'?: Function;
  }
  interface SmttRolloverMenu {
    'disabled'?: boolean;
    'isExpanded'?: string;
  }
  interface SmttStatusLabel {
    'subtle'?: boolean;
    'variation'?: 'completed' | 'cancelled' | 'pending';
  }
  interface SmttTree {
    /**
    * Name of field containing children
    */
    'childrenField'?: string;
    /**
    * The definition of the columns
    */
    'columns'?: ColumnDefinition[];
    /**
    * Whether tree should be expanded by default
    */
    'expanded'?: boolean;
    /**
    * Name of group field
    */
    'groupField'?: string;
    /**
    * Event triggered when a row is selected or deselected
    */
    'onRowSelected'?: (event: CustomEvent<any>) => void;
    /**
    * Whether or not to paginate data
    */
    'paginate'?: boolean;
    /**
    * Height of rows
    */
    'rowHeight'?: number;
    /**
    * Type of selection to be used in tree
    */
    'rowSelection'?: 'single' | 'multiple';
    /**
    * The array of data to be displayed within rows
    */
    'rows'?: object[];
    /**
    * The desired height of the element
    */
    'treeHeight'?: number;
  }
  interface SmttWizard {
    /**
    * The title of wizard
    */
    'name'?: string;
    /**
    * The subHeading of wizard
    */
    'subHeading'?: string;
  }
  interface SmttWizardStep {
    /**
    * Whether step is active
    */
    'active'?: boolean;
    /**
    * The title of the wizard step
    */
    'name'?: string;
    /**
    * The subtitle of the wizard step
    */
    'subHeading'?: string;
  }

  interface IntrinsicElements {
    'check-box': CheckBox;
    'smtt-accordion': SmttAccordion;
    'smtt-accordion-item': SmttAccordionItem;
    'smtt-button': SmttButton;
    'smtt-contextual-box': SmttContextualBox;
    'smtt-dropdown': SmttDropdown;
    'smtt-dropdown-group': SmttDropdownGroup;
    'smtt-dropdown-item': SmttDropdownItem;
    'smtt-footer': SmttFooter;
    'smtt-header': SmttHeader;
    'smtt-icon': SmttIcon;
    'smtt-input': SmttInput;
    'smtt-rollover-menu': SmttRolloverMenu;
    'smtt-status-label': SmttStatusLabel;
    'smtt-tree': SmttTree;
    'smtt-wizard': SmttWizard;
    'smtt-wizard-step': SmttWizardStep;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'check-box': LocalJSX.CheckBox & JSXBase.HTMLAttributes<HTMLCheckBoxElement>;
      'smtt-accordion': LocalJSX.SmttAccordion & JSXBase.HTMLAttributes<HTMLSmttAccordionElement>;
      'smtt-accordion-item': LocalJSX.SmttAccordionItem & JSXBase.HTMLAttributes<HTMLSmttAccordionItemElement>;
      'smtt-button': LocalJSX.SmttButton & JSXBase.HTMLAttributes<HTMLSmttButtonElement>;
      'smtt-contextual-box': LocalJSX.SmttContextualBox & JSXBase.HTMLAttributes<HTMLSmttContextualBoxElement>;
      'smtt-dropdown': LocalJSX.SmttDropdown & JSXBase.HTMLAttributes<HTMLSmttDropdownElement>;
      'smtt-dropdown-group': LocalJSX.SmttDropdownGroup & JSXBase.HTMLAttributes<HTMLSmttDropdownGroupElement>;
      'smtt-dropdown-item': LocalJSX.SmttDropdownItem & JSXBase.HTMLAttributes<HTMLSmttDropdownItemElement>;
      'smtt-footer': LocalJSX.SmttFooter & JSXBase.HTMLAttributes<HTMLSmttFooterElement>;
      'smtt-header': LocalJSX.SmttHeader & JSXBase.HTMLAttributes<HTMLSmttHeaderElement>;
      'smtt-icon': LocalJSX.SmttIcon & JSXBase.HTMLAttributes<HTMLSmttIconElement>;
      'smtt-input': LocalJSX.SmttInput & JSXBase.HTMLAttributes<HTMLSmttInputElement>;
      'smtt-rollover-menu': LocalJSX.SmttRolloverMenu & JSXBase.HTMLAttributes<HTMLSmttRolloverMenuElement>;
      'smtt-status-label': LocalJSX.SmttStatusLabel & JSXBase.HTMLAttributes<HTMLSmttStatusLabelElement>;
      'smtt-tree': LocalJSX.SmttTree & JSXBase.HTMLAttributes<HTMLSmttTreeElement>;
      'smtt-wizard': LocalJSX.SmttWizard & JSXBase.HTMLAttributes<HTMLSmttWizardElement>;
      'smtt-wizard-step': LocalJSX.SmttWizardStep & JSXBase.HTMLAttributes<HTMLSmttWizardStepElement>;
    }
  }
}


